import { MailService } from '@sendgrid/mail';

if (!process.env.SENDGRID_API_KEY) {
  console.warn("SENDGRID_API_KEY environment variable not set - email functionality will be disabled");
}

const mailService = new MailService();
if (process.env.SENDGRID_API_KEY) {
  mailService.setApiKey(process.env.SENDGRID_API_KEY);
}

export interface EmailParams {
  to: string;
  from: string;
  subject: string;
  text?: string;
  html?: string;
}

export async function sendEmail(params: EmailParams): Promise<{ success: boolean; messageId?: string; error?: string }> {
  if (!process.env.SENDGRID_API_KEY) {
    return {
      success: false,
      error: 'SendGrid API key not configured'
    };
  }

  try {
    const [response] = await mailService.send({
      to: params.to,
      from: params.from,
      subject: params.subject,
      text: params.text,
      html: params.html,
    });
    
    return {
      success: true,
      messageId: response.headers['x-message-id'] as string
    };
  } catch (error: any) {
    console.error('SendGrid email error:', error.response?.body || error.message);
    return {
      success: false,
      error: error.response?.body?.errors?.[0]?.message || error.message
    };
  }
}

export async function sendScanReportEmail(recipientEmail: string, scanData: any, businessName: string): Promise<{ success: boolean; messageId?: string; error?: string; htmlContent?: string; textContent?: string }> {
  // Format scanData properly - if it's an object, convert to readable JSON string
  const formattedScanData = typeof scanData === 'string' 
    ? scanData 
    : scanData 
      ? JSON.stringify(scanData, null, 2) 
      : 'Full analysis available in your dashboard.';

  const htmlContent = `
    <!DOCTYPE html>
    <html>
    <head>
      <style>
        body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
        .header { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 20px; text-align: center; }
        .content { padding: 20px; }
        .section { margin: 20px 0; padding: 15px; border-left: 3px solid #667eea; background: #f8f9fa; }
        .footer { text-align: center; padding: 20px; color: #666; font-size: 12px; }
        pre { background: #f4f4f4; padding: 10px; border-radius: 4px; overflow-x: auto; }
      </style>
    </head>
    <body>
      <div class="header">
        <h1>ðŸ›¸ Business Scan Report - ${businessName}</h1>
        <p>Your AlienProbe.ai Analysis is Complete</p>
      </div>
      <div class="content">
        <h2>Scan Results</h2>
        <div class="section">
          <h3>Business Overview</h3>
          <p><strong>Business Name:</strong> ${businessName}</p>
          <div><strong>Analysis:</strong></div>
          <pre>${formattedScanData}</pre>
        </div>
        <div class="section">
          <p>This scan was automatically generated by Hunter Brody, your autonomous business optimization agent.</p>
          <p>Access your complete results and recommendations in your AlienProbe.ai dashboard.</p>
        </div>
      </div>
      <div class="footer">
        <p>AlienProbe.ai - Autonomous Business Intelligence</p>
        <p>This is an automated email. Please do not reply directly to this message.</p>
      </div>
    </body>
    </html>
  `;

  const textContent = `
    Business Scan Report - ${businessName}
    
    Your AlienProbe.ai analysis is complete!
    
    Business Name: ${businessName}
    
    Analysis:
    ${formattedScanData}
    
    This scan was automatically generated by Hunter Brody, your autonomous business optimization agent.
    
    ---
    AlienProbe.ai - Autonomous Business Intelligence
  `;

  const result = await sendEmail({
    to: recipientEmail,
    from: 'noreply@alienprobe.ai', // Configure this with your verified sender
    subject: `ðŸ“Š Business Scan Complete: ${businessName}`,
    text: textContent,
    html: htmlContent
  });

  // Return the email content along with the result
  return {
    ...result,
    htmlContent,
    textContent
  };
}
